[{"/Users/sofia/Desktop/Work/react-projects/square_board/Square_board/src/index.js":"1","/Users/sofia/Desktop/Work/react-projects/square_board/Square_board/src/App.js":"2","/Users/sofia/Desktop/Work/react-projects/square_board/Square_board/src/components/Square.jsx":"3","/Users/sofia/Desktop/Work/react-projects/square_board/Square_board/src/components/SquareBlock.jsx":"4","/Users/sofia/Desktop/Work/react-projects/square_board/Square_board/src/components/Selection.jsx":"5"},{"size":484,"mtime":1617012810587,"results":"6","hashOfConfig":"7"},{"size":1056,"mtime":1617142044331,"results":"8","hashOfConfig":"7"},{"size":359,"mtime":1617133512319,"results":"9","hashOfConfig":"7"},{"size":1364,"mtime":1617133558008,"results":"10","hashOfConfig":"7"},{"size":2200,"mtime":1617139311513,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"1mwztij",{"filePath":"15","messages":"16","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"14"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24"},"/Users/sofia/Desktop/Work/react-projects/square_board/Square_board/src/index.js",[],["25","26"],"/Users/sofia/Desktop/Work/react-projects/square_board/Square_board/src/App.js",["27","28","29","30"],"/Users/sofia/Desktop/Work/react-projects/square_board/Square_board/src/components/Square.jsx",[],"/Users/sofia/Desktop/Work/react-projects/square_board/Square_board/src/components/SquareBlock.jsx",["31"],"import React, {useState, useEffect} from 'react'\nimport Square from './Square'\nimport './Square.css'\n\nfunction SquareBlock({countSquare, boardArray}) {\n    const [mouseTrack, setMouseTrack] = useState([])\n    const addBlockToTrack = (index) => {\n        const row_index = Math.trunc(index / countSquare)+1;\n        const column_index = index % countSquare + 1;\n        const tmp = [...mouseTrack];\n        tmp.unshift({id:mouseTrack.length, row:row_index, column:column_index})\n        setMouseTrack(tmp)\n    }\n    const squareBlockStyle = {\n        gridTemplateColumns: `repeat(${countSquare}, 1fr)`,\n        gridTemplateRows: `repeat(${countSquare}, 1fr)`\n    }\n    return (\n        <div className=\"wrapper\">\n            <div className =\"squareBlock\" style ={squareBlockStyle}>\n                {\n                    boardArray.map((value, index) => \n                        <Square key= {index} id = {index} addPath={addBlockToTrack} />) \n                }\n            </div>\n            <div className=\"pathInfo\">\n                <h2>Hover squares</h2>\n                {\n                    mouseTrack.map( value => {\n                        return <div className=\"pathIndex\"> row: <span>{value.row}</span>  column: <span>{value.column}</span></div>\n                    })\n                }\n            </div>\n        </div>\n    )\n}\n\nexport default SquareBlock\n","/Users/sofia/Desktop/Work/react-projects/square_board/Square_board/src/components/Selection.jsx",["32"],"import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport Button from '@material-ui/core/Button';\n\nconst useStyles = makeStyles((theme) => ({\n  button: {\n    display: 'block',\n    backgroundColor:'aqua',\n    marginTop: theme.spacing(8),\n  },\n  formControl: {\n    margin: theme.spacing(1),\n    minWidth: 150,\n  },\n}));\nconst blockStyle ={\n    display: 'flex',\n    alignItems: 'baseline'\n} \nfunction Selection({squares, setCurrMode, setIsChoosen}) {\n    const classes = useStyles();\n    const [mode, setMode] = React.useState('');\n    const [open, setOpen] = React.useState(false);\n  \n    const handleChange = (event) => {\n      setMode(event.target.value);\n      (event.target.value > 0) ? setCurrMode(event.target.value) : setIsChoosen(false)\n    };\n  \n    const handleClose = () => {\n      setOpen(false);\n\n      setIsChoosen(true);\n    };\n  \n    const handleOpen = () => {\n      setOpen(true);\n      setIsChoosen(false)\n    };\n    return (\n        <div style={blockStyle}>\n            <FormControl className={classes.formControl}>\n                <InputLabel id=\"demo-controlled-open-select-label\">Mode</InputLabel>\n                <Select\n                labelId=\"demo-controlled-open-select-label\"\n                id=\"demo-controlled-open-select\"\n                open={open}\n                onClose={handleClose}\n                onOpen={handleOpen}\n                value={mode}\n                onChange={handleChange}\n                >\n                <MenuItem value=\"\">\n                    <em>Select Mode</em>\n                </MenuItem>\n                {\n                    squares.map(item => {\n                        return <MenuItem value={item.field} key={item.id}>{item.id}</MenuItem>\n                    })\n                }\n                </Select>\n            </FormControl>\n            {/* <Button variant=\"contained\" size=\"medium\" onClick={()=>{ setCurrMode(mode.id) }}>START</Button> */}\n        </div>\n    )\n}\n\nexport default Selection\n",{"ruleId":"33","replacedBy":"34"},{"ruleId":"35","replacedBy":"36"},{"ruleId":"37","severity":1,"message":"38","line":1,"column":20,"nodeType":"39","messageId":"40","endLine":1,"endColumn":27},{"ruleId":"37","severity":1,"message":"41","line":4,"column":8,"nodeType":"39","messageId":"40","endLine":4,"endColumn":13},{"ruleId":"37","severity":1,"message":"42","line":9,"column":19,"nodeType":"39","messageId":"40","endLine":9,"endColumn":29},{"ruleId":"43","severity":1,"message":"44","line":22,"column":6,"nodeType":"45","endLine":22,"endColumn":17,"suggestions":"46"},{"ruleId":"37","severity":1,"message":"47","line":1,"column":26,"nodeType":"39","messageId":"40","endLine":1,"endColumn":35},{"ruleId":"37","severity":1,"message":"48","line":7,"column":8,"nodeType":"39","messageId":"40","endLine":7,"endColumn":14},"no-native-reassign",["49"],"no-negated-in-lhs",["50"],"no-unused-vars","'useMemo' is defined but never used.","Identifier","unusedVar","'axios' is defined but never used.","'setSquares' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'currMode'. Either include it or remove the dependency array.","ArrayExpression",["51"],"'useEffect' is defined but never used.","'Button' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"52","fix":"53"},"Update the dependencies array to be: [currMode, isChoosen]",{"range":"54","text":"55"},[711,722],"[currMode, isChoosen]"]